#!/bin/bash -eu
update=true
if [[ $# -gt 0 ]]; then
    if [[ $1 != "--noupdate" ]]; then
        echo "Invalid parameter! Use:"
        echo "./create_sys_image"
        exit 1
    else
        update=false
    fi
fi

if [[ $(basename $(pwd)) == "bin" ]]; then
    cd ..
fi
export MPLBACKEND=qt5agg
mkdir -p output

julia_version=$(julia --version | awk '{print($3)}')
julia_major=${julia_version:0:3}
if [[ $julia_major == "1.1" ]]; then
    julia_major=${julia_version:0:4} 
fi
# export "PYTHON"=""

if test -f "kps-image-${julia_major}.so"; then
    mv bin/kps-image-${julia_major}.so bin/kps-image-${julia_major}.so.bak
fi

if [[ $update == true ]]; then
    echo "Updating packages..."
    if test -f "Manifest.toml"; then
    mv Manifest.toml Manifest.toml.bak
    fi
fi
echo "--> 1"
julia -e "using Pkg; Pkg.activate(temp=true); Pkg.add(\"PyCall\"); Pkg.build(\"PyCall\")"

if [[ $update == true ]]; then
    echo "--> 2"
    julia --pkgimages=no --project -e "include(\"./test/update_packages.jl\");"
fi

echo "--> 3"
julia  --pkgimages=no --project -e "using Pkg; Pkg.precompile()"

echo "--> 4"
julia  --pkgimages=no --project -e "include(\"./test/create_sys_image.jl\");"
mv kps-image_tmp.so bin/kps-image-${julia_major}.so

echo "--> 5"
julia --project -J bin/kps-image-${julia_major}.so -e "using ControlPlots"
echo "Successfully created system image!"